#!/usr/bin/env ruby

def main(requested_profile)
    if ENV['DOTFILES_PROFILE'] && !requested_profile
        requested_profile = ENV['DOTFILES_PROFILE']
        requested_force = 0
    else
        requested_force = 1
    end

    if !requested_profile
        puts("Usage: #{$0} [<profile>] [force]")
        exit
    end

    ENV['DOTFILES_PROFILE'] = requested_profile

    if STDIN.tty?
        input = open('profiles.txt', 'r')
    else
        input = STDIN
    end

    input.each_line() {|line|
        line = line.strip()
        if line =~ /^\s*($|#)/
            next
        end

        profile, force, action = parse_line(line)
        if !action
            puts "invalid spec: #{line}"
            next
        end

        if profile != '-' && profile != requested_profile
            next
        end

        if force > requested_force
            next
        end

        case action
        when /^\$/
            run_command(action.sub(/^\$\s*/, ''), requested_force)
        when /^https:\/\/aur./
            install_aur(action, requested_force)
        else
            install_pkg(action, requested_force)
        end
    }
end

def parse_line(line)
    profile, action = line.split(/\s+/, 2)
    if !action
        return nil, nil, nil
    end

    force = action[/^!*/].length
    return profile, force, action[force..-1].strip()
end

def run_command(cmd, force)
    puts("CMD #{cmd}")
    `#{cmd} >&2`
end

def install_aur(url, force)
    pkgname = url.sub(/.*\/([^\/]+)\/?$/, '\1')
    tarurl = url.sub(/\/((..)[^\/]*)\/?$/, '/\2/\1/\1.tar.gz')

    `pacman -Qqs #{pkgname}`
    if $?.to_i == 0 && force <= 0
        return
    end

    installed_version = `pacman -Qi #{pkgname} 2>&1 | awk '/Version/{print $3}'`
    installed_version.strip!()

    puts("AUR #{pkgname}")

    tempdir = `mktemp -d`.strip()
    `cd #{tempdir} && curl #{tarurl} | tar xz >&2`
    Dir.chdir(tempdir + '/' + pkgname)

    if `source ./PKGBUILD && type pkgver 2>&1`[/is a function/]
        puts("package version is dynamic, needs to build a package")
        pkgver = nil
    else
        pkgver = `source ./PKGBUILD && echo $pkgver`.strip()
        pkgrel = `source ./PKGBUILD && echo $pkgrel`.strip()
        if pkgrel != ""
            pkgver = pkgver + "-" + pkgrel
        end
    end

    if installed_version != pkgver
        `makepkg -rsi --noconfirm --needed >&2`
        if $?.to_i > 0
            puts "failed to install package"
            exit
        end
    end

    `rm -rf #{tempdir}`

    Dir.chdir('/')
end

def install_pkg(pkgname, force)
    `pacman -Qs '^#{pkgname}$'`
    if $?.to_i == 0
        `pacman -Qu #{pkgname}`
        if $?.to_i > 0
            return
        end
    end

    puts("PKG #{pkgname}")

    `sudo pacman -S #{pkgname} --noconfirm >&2`
    if $?.to_i > 0
        puts "failed to install package"
        exit
    end
end

main(ARGV[0])
