#!/bin/bash

### recycle â€” pattern-based home dir cleanup.
###
### Tool uses extended file attributes to store configuration.
### To enable in ZFS:
###   zfs set xattr=on <dataset>
###
### At least one box should be defined.
### Box is a directory which stores files which names matches particular
### patterns. Files which do not match any pattern will be moved to the trash
### directory.
###
### Example:
###   recycle box add images '\.jpg$'
###   recycle run # All .jpg files will be moved to images directory,
###               # all other files will be moved to trash.
###
###  Nested directories can be also marked as boxes:
###   recycle box add images/gif '\.gif$'
###   recycle box add images/png '\.png$'
###
### To avoid some file or directory to be recycled it should be marked with
### skip sub-command:
###   recycle skip .zshrc
###
### To unset box configuration or skip flag, use reset sub-command:
###   recycle reset .zshrc images
###
### Usage:
###   recycle [options] [-n|--dry-run] run [<dir>]...
###   recycle [options] skip <path>...
###   recycle [options] box list
###   recycle [options] box add <dir> <pattern>
###   recycle [options] reset <path>...
###   recycle --help | -h
###
### Options:
###   --dry-run -n       Do not perform actual recycle. Print what will be done.
###   --root-dir <path>  Root directory which will be scanned for boxes.
###                       [default: ~]
###   --trash <name>     Directory name to use for trash.
###                       [default: trash]

set -euo pipefail

source /usr/share/bash/opts/opts.bash

declare -a args
declare -A opts

opts:parse opts args \
    --help -h \
    --dry-run -n \
    --root-dir: \
    --trash: \
    -- "$@"

dry_run="${opts[--dry-run]:-${opts[-n]:-}}"
root_dir="${opts[--root-dir]:-$HOME}"
trash="$root_dir/${opts[--trash]:-trash}"

:attr:get() {
    getfattr -n user.recycle.$1 --only-value "$2" 2>/dev/null
}

:attr:set() {
    setfattr -n user.recycle.$1 -v "$2" "${@:3}"
}

:attr:match() {
    getfattr -m "user.recycle.$1" "${@:2}"
}

:attr:reset() {
    :attr:match '*' "$1" \
        | grep -vP '^#' \
        | xargs -n1 -I{} setfattr -x {} "$1"
}

:help() {
    [[ "$*" ]] && echo "error: $*." && echo "--" && echo

    sed -rn 's/^### ?//;T;p' "$0"
    exit 0
}

:patterns:read() {
    while read -rd $'\0' dir; do
        if pattern=$(:attr:get box.pattern "$dir"); then
            printf "%s\t%s\n" "$pattern" "$dir"
        else
            if :attr:get box "$dir" >/dev/null; then
                :patterns:read "$dir"
            fi
        fi
    done < <(
        find "$1/" \
            -maxdepth 1 -mindepth 1 -type d -print0
    )
}

[[ "${opts[--help]:-${opts[-h]:-}}" ]] && :help

:reset() {
    [[ ! "$*" ]] &&
        :help "reset command requires at least one path"

    for file in "$@"; do
        if :attr:reset "$file"; then
            [[ -d "$file" ]] && while read -rd $'\0' dir; do
                :reset "$dir"
            done < <(find "$file/" -mindepth 1 -maxdepth 1 -type d -print0)
        fi
    done
}

:skip() {
    [[ ! "$*" ]] &&
        :help "skip command requires at least one path"

    :attr:set skip "true" "$@"
}

:box() {
    case "$1" in
        list) :box:list "${@:2}" ;;
        add)  :box:add  "${@:2}" ;;
        *)    :help "unknown box sub-command: $1" ;;
    esac
}

:box:list() {
    :patterns:read "$root_dir" | column -t
}

:box:add() {
    [[ ! "${1:-}" || ! "${2:-}" ]] &&
        :help "box command requires two arguments argument: <dir> <pattern>"

    mkdir -p "$1"

    parent="$(dirname $(realpath --relative-to "$root_dir" "$1"))"
    while [[ "$parent" != "." ]]; do
        :attr:set box "true" "$parent"
        parent="$(dirname "$parent")"
    done

    :attr:set box.pattern "$2" "$1"
}

:run() {
    set -- "${@:-.}"

    :mv() { ${dry_run:+echo} mv -v --backup=numbered "${@:2}" "$1"; }
    :rm() { ${dry_run:+echo} rm -v "$@"; }

    declare -A patterns=()

    while IFS=$'\t' read -r pattern dir; do
        patterns[$pattern]="$dir"
    done < <(:patterns:read "$root_dir")

    if [[ ! "${patterns[*]}" ]]; then
        :help "no boxes defined"
    fi

    mkdir -p "$trash"
    :attr:set skip "true" "$trash"

    while read -rd $'\0' path; do
        if [[ "$(:attr:match '*' "$path")" ]]; then
            continue
        fi

        entry="${path##*/}$([[ -d "$path" ]] && echo / || :)"

        for pattern in "${!patterns[@]}"; do
            box=${patterns[$pattern]}

            [[ "$entry" =~ $pattern ]] && {
                :mv $box "$path"
                continue 2
            }
        done

        :mv $trash "$path"
    done < <(
        find "${@/%//}" \
            -mindepth 1 -maxdepth 1 \
            -type f,d \
            -print0
    )
}

case "${args[1]:-}" in
    run)   :run   "${args[@]:2}" ;;
    skip)  :skip  "${args[@]:2}" ;;
    box)   :box   "${args[@]:2}" ;;
    reset) :reset "${args[@]:2}" ;;
    '')    :help "no command specified" ;;
    *)     :help "unknown command: ${args[1]}" ;;
esac
