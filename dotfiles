#!/usr/bin/env ruby

require 'fileutils'
require 'tempfile'

def main(action, profile)
    if action == nil
        puts("Usage: #{$0} install [<profile>] | rejoin")
        exit
    end

    if ENV['DOTFILES_PROFILE'] && !profile
        profile = ENV['DOTFILES_PROFILE']
    end

    if !profile
        puts("<profile> should be specified")
        exit
    end

    ENV['DOTFILES_PROFILE'] = profile

    placeholder_expanded = 'xxx'
    placeholder_base = nil
    `git ls-files`.split("\n").each() do |file_name|
        target_dir = File.expand_path('~') + '/'
        if file_name.start_with?('rootfs/')
            target_dir = '/'
        end

        source_type = nil
        case file_name
        when /README/
            # skip readme
        when /^(dotfiles|bootstrap)$/
            # skip installation scripts
        when /(.*)\.(\$.*$)/
            placeholder_base = $1
            placeholder_expanded = file_name.sub($2, profile)
        when /^#{placeholder_expanded}$/
            #install_file(file_name, target_dir + placeholder_base)
            source_type = :file
            target_name = target_dir + placeholder_base
        when /^#{placeholder_base}\./
            # skip unneeded files
        when /\.template$/
            source_type = :template
            target_name = target_dir + file_name.sub(/\.template$/, '')
        else
            source_type = :file
            target_name = target_dir + file_name
        end

        # @TODO: how to refactor that?
        case [source_type, action]
        when [:file, 'install']
            install_file(file_name, target_name)
        when [:file, 'rejoin']
            rejoin_file(file_name, target_name)
        when [:template, 'install']
            install_template(file_name, target_name)
        when [:template, 'rejoin']
            rejoin_template(file_name, target_name)
        end
    end

    if action == 'rejoin'
        exec('git status -s')
    end
end

def ensure_dir(file_name)
    dir_name = File.dirname(file_name)
    `mkdir -p #{dir_name}`
end

def remove_rootfs_prefix(source)
    if source.start_with?('/rootfs')
        return source[7..-1], true
    else
        return source, false
    end
end

def install_file(source, destination)
    destination, rootfs = remove_rootfs_prefix(destination)

    if File.exist?(destination) && FileUtils.identical?(source, destination)
        return
    end

    if rootfs
        puts("sudo cp: #{source} -> #{destination}")
        `sudo cp #{source} #{destination}`
    else
        puts("symlink: #{source} -> #{destination}")
        `ln -Tsf #{File.realdirpath(source)} #{destination}`
    end
end

def rejoin_file(source, destination)
    destination, _ = remove_rootfs_prefix(destination)

    if !File.exist?(destination) || FileUtils.identical?(source, destination)
        return
    end

    `cp -p #{destination} #{source}`
end

def get_user_input(prompt, silent)
    flag = silent ? 's' : ''
    value = `read -#{flag}p"#{prompt}" && echo -n $REPLY`
    if silent
        puts
    end
    return value
end

def filter_lines(lines, template)
    return lines.select{|l| !l[/^#{template}$/]}
end

def diff_template(source, destination)
    if !File.exist?(destination)
        return true
    end

    s = Tempfile.new('dotfiles')
    d = Tempfile.new('dotfiles')

    filtered_source = File.open(source).each_line()
    filtered_destination = File.open(destination).each_line()

    File.open(source).each_line() do |line|
        pattern = line.split(/{{.+?}}/).map{|p| Regexp.escape(p)}.join('.*')

        if pattern[/\.\*/]
            filtered_source = filter_lines(filtered_source, pattern)
            filtered_destination = filter_lines(filtered_destination, pattern)
        end
    end

    s.write(filtered_source.join(''))
    d.write(filtered_destination.join(''))
    s.close()
    d.close()

    patch = Tempfile.new('dotfiles_patch')

    `diff -u #{s.path} #{d.path} > #{patch.path}`
    s.unlink()
    d.unlink()

    if $?.to_i == 0
        patch.unlink()
        return nil
    end

    return patch
end

def rejoin_template(source, destination)
    if !File.exist?(destination)
        return
    end

    patch = diff_template(source, destination)
    if patch
        `patch #{source} --no-backup-if-mismatch -sT < #{patch.path}`
        patch.unlink()
    end
end

def query_all_placeholders(line, cache)
    while line =~ /({{.+?}})/
        placeholder = $1

        value = cache[placeholder]
        if !value
            value = get_user_input("#{placeholder}: ",
                placeholder =~ /PASSWORD/)
            cache[placeholder] = value
        end

        line = line.sub(placeholder, value)
    end

    return line
end

def install_template(source, destination)
    ensure_dir(source)

    if !diff_template(source, destination)
        return
    end

    puts("generating: #{destination}")

    destination_temp = Tempfile.new('dotfiles')

    cache = {'{{DOTFILES_PROFILE}}' => ENV['DOTFILES_PROFILE']}
    File.open(source).each_line() do |line|
        destination_temp.write(query_all_placeholders(line, cache))
    end

    destination_temp.close()

    `mv #{destination_temp.path} #{destination}`
end

main(ARGV[0], ARGV[1])
