clearsnippets

snippet deps "rebar.config deps section"
{deps, []}.
endsnippet

snippet github "rebar.config github dep"
{${1:application}, "${2:vsn}", {git, "git://github.com/${3:username}/$1.git"}}
endsnippet

snippet escript
#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable${1: ${2:args}}

endsnippet

snippet appsrc "*.app.src file skeleton"
{application, ${1:application}, [
    {description, "${2:description"}},
    {vsn, ${3:git}},
    {registered, []},
    {applications, [kernel, stdlib]},
    {mod, {$1_app, []}}]}.
endsnippet

snippet app "Generic App Template"
-behaviour(application).

-export([start/2, stop/1]).

start(_Type, _Args) ->
    ${1:`!p snip.rv = snip.basename[:-4] + "_sup"`}:start_link().

stop(_State) ->
    ok.
endsnippet

snippet sup "Generic Supervisor Template"
-behaviour(supervisor).

-export([
    start_link/0,
    init/1
]).

start_link() ->
    supervisor:start_link({local, ${1:?MODULE}}, $1, []).

init(_Args) ->
    {ok, {{one_for_one, 5, 60}, [
        $2
    ]}}.
endsnippet

snippet chi "Supervisor Child Spec"
{${1:id},
    {${2:$1}, start_link, []},
    permanent,
    brutal_kill,
    ${3:worker},
    [$2]}
endsnippet

snippet genser "Generic Server Template"
-behaviour(gen_server).

-export([
    start_link/0
]).

-export([
    init/1,
    handle_call/3,
    handle_cast/2,
    handle_info/2,
    terminate/2,
    code_change/3
]).

start_link() ->
    gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

%% @hidden
init(_Args) ->
    {ok, nil}.

%% @hidden
handle_call(_Message, _From, State) ->
    {noreply, State}.

%% @hidden
handle_cast(_Message, State) ->
    {noreply, State}.

%% @hidden
handle_info(_Info, State) ->
    {noreply, State}.

%% @hidden
terminate(_Reason, _State) ->
    ok.

%% @hidden
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.
endsnippet

snippet gsc "Generic Server Call"
gen_server:call(${1:?MODULE}, ${2:request}).
endsnippet

snippet hcl "Generic Server handle_call callback"
handle_call(${1:_Message}, ${2:_From}, ${3:_State}) ->
    $4;
endsnippet

snippet hin "Generic Server handle_info callback"
handle_info(${1:_Message}, ${2:_From}, ${3:_State}) ->
    $4;
endsnippet


snippet rp "Generic Server handle_ca* reply answer"
{reply, ${1:Reply}, ${2:State}}
endsnippet

snippet nrp "Generic Server handle_ca* no reply answer"
{noreply, ${1:State}};
endsnippet

snippet pat "Case:Receive:Try Clause"
${1:pattern}${2: when ${3:guard}} ->;
	${4:body}
endsnippet

snippet beh "Behaviour Directive"
-behaviour(${1:behaviour}).
endsnippet

snippet case "Case Expression"
case ${1:expression} of
	${2:pattern}${3: when ${4:guard}} ->
		${5:body}
end
endsnippet

snippet def "Define Directive"
-define(${1:macro}${2:(${3:param})}, ${4:body}).
endsnippet

snippet exp "Export Directive"
-export([
    $1
]).
endsnippet

snippet fun "Fun Expression"
fun
	(${1:pattern})${2: when ${3:guard}} ->
		${4:body}
end
endsnippet

snippet fu "Function"
%% @doc $5
-spec $1(${6:$2}) -> ${7:ok}.
${1:function}(${2:param})${3: when ${4:guard}} ->
	${8:ok}.
endsnippet

snippet if "If Expression"
if
	${1:guard} ->
		${2:body}
end
endsnippet

snippet ifdef "Ifdef Directive"
-ifdef(${1:macro}).
endsnippet

snippet ifndef "Ifndef Directive"
-ifndef(${1:macro}).
endsnippet

snippet imp "Import Directive"
-import(${1:module}, [${2:function}/${3:arity}]).
endsnippet

snippet inc "Include Directive"
-include("${1:file}").
endsnippet

snippet mod "Module Header"
%% @author Stanislav Seletskiy <s.seletskiy@gmail.com>
%% @doc $2
-module(${1:`!p snip.rv = snip.basename or "module"`}).
-created('Date: `!p import time; snip.rv = time.strftime("%d/%m/%Y")`').
-created_by('Stanislav Seletskiy <s.seletskiy@gmail.com>').
endsnippet

snippet spec "Spec"
-spec $1($2) -> $3.
endsnippet

snippet doc "EDoc"
%% @doc $1
endsnippet

snippet hpub "Public Methods Header"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Public Methods
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
endsnippet

snippet hapi "End User Api Header"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% End User Api
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
endsnippet

snippet hgen "Gen Server Methods Header"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Generic Server Specific
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
endsnippet

snippet hpri "Private Methods Api"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Private Methods
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
endsnippet

snippet rcv "Receive Expression"
receive
${1:	${2:pattern}${3: when ${4:guard}} ->
		${5:body}}
${6:after
	${7:expression} ->
		${8:body}}
end
endsnippet

snippet rec "Record Directive"
-record(${1:state}, {
    $2
}).
endsnippet

snippet try "Try Expression"
try${1: ${2:expression}${3: of
	${4:pattern}${5: when ${6:guard}} ->
		${7:body}}}
${8:catch
	${9:pattern}${10: when ${11:guard}} ->
		${12:body}}
${13:after
	${14:body}}
end
endsnippet

snippet undef "Undef Directive"
-undef (${1:macro}).
endsnippet

# vim:ft=snippets:
