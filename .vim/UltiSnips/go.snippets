clearsnippets

snippet f "func"
func ${1:FuncName}($2)${3: }{
	${4:// @TODO}
}
endsnippet

snippet tf "func (type)"
func (${1/^\*?(.).*/\l$1/} ${1:Type}) ${2:FuncName}($3)${4: }{
	${5:// @TODO}
}
endsnippet

snippet s "type struct"
type ${1:TypeName} struct {
	${2:// @TODO}
}
endsnippet

snippet t "type"
type ${1:TypeName} ${2:description}
endsnippet

snippet p "package"
package ${1:`!v expand('%:p:h:t')`}
endsnippet

snippet te "func Test"
func Test${1:FuncName}(t *testing.T) {
	${2:// @TODO}
}
endsnippet

snippet ti "interface"
type ${1:SmthDoer} interface {
	${2:// @TODO}
}
endsnippet

snippet todo "@TODO"
// @TODO $0
endsnippet

snippet i "if "
if $1 {
	${VISUAL}$0
}
endsnippet

snippet ifer "if err != nil"
if err != nil {
	return err
}
endsnippet

snippet iferp "if err != nil panic"
if err != nil {
	panic(err)
}
endsnippet

snippet r "return"
return $0
endsnippet

snippet fs "... string"
${1:Name} string$0
endsnippet

snippet exp "test expected"
actual := ${1:"Something"}
if actual != ${2:"Actual"} {
	t.Fatal("unexpected", actual)
}
endsnippet

snippet e "else" w
 else {
	$0
}
endsnippet

snippet stat "temp snippet"
actual := (Status{Severity: $1, Message: \`${2:blah}\`}).String()$0
endsnippet

snippet ci "const iota"
const (
	${1:CONSTANT} = iota$0
)
endsnippet

snippet ass "anon struct with fields" w
struct {
	$1
}{
	$0
}
endsnippet

global !p
def to_undercase(name):
	s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
	return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()
endglobal

snippet "((\w+)\s*(\w+)) js$" "json annotation" br
`!p snip.rv=match.group(1)` \`json:"`!p snip.rv=to_undercase(match.group(2))`"\`
endsnippet

snippet fm "func main"
func main() {
	$0
}
endsnippet

snippet fas "anon struct"
${1:Name} struct {
	$0
}
endsnippet

snippet fi "field int"
${1:Name} int
endsnippet

snippet fb "field bool"
${1:Name} bool
endsnippet
>>>>>>> Stashed changes
