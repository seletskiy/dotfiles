global !p
import px.util
endglobal

snippet i "if"
if $1:
	${0:${VISUAL}}
endsnippet

snippet r "return"
return 
endsnippet

snippet d "def"
def $1($2):
	$3
endsnippet

snippet f "for"
for $1 in $2:
	${0:${VISUAL}}
endsnippet

snippet p "print" b
print(${1:${VISUAL}})
endsnippet

snippet s "assert" b
assert 
endsnippet

snippet "(\s+)if n" "if not" br
`!p snip.rv = match.group(1)`if not 
endsnippet

snippet "^i" "import" "True" re
import 
endsnippet

snippet "^import (\w+)" "from ... import" br
from `!p snip.rv = match.group(1)` import 
endsnippet

snippet e "self.assertEquals" "px.util.match_higher_indent(buffer, cursor, 'def test')" be
self.assertEqual(
	$1,
	$2
)
endsnippet

snippet d "def test" "px.util.match_higher_indent(buffer, cursor, 'class \w+\(unittest')" be
def test$1(self):
	$2
endsnippet

snippet "^cu" "class unit test" br
import unittest

class $1TestCase(unittest.TestCase):
	$2

if __name__ == '__main__':
	unittest.main()
endsnippet

snippet c "class" b
class $1:
	$2
endsnippet

snippet c "class constructor" "px.util.match_higher_indent(buffer, cursor, '^class')" be
def __init__(self${1/.+/, /}$1):
	$2
endsnippet
