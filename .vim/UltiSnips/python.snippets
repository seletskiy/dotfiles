global !p
from px.util import *
import px.python
import px.all
endglobal

global !p
def ensure_newlines(start, end):
	px.python.ensure_newlines(snip.buffer, start)
	px.python.ensure_newlines_after(snip.buffer, end)

def expand_method_in_right_place(snip):
	if isinstance(snip.context, dict):
		print(snip.context)
		return

	if snip.context and snip.context[0].strip().startswith('class '):
		indent_amount = 1
	else:
		indent_amount = 0

	if snip.visual_content:
		line, _ = get_higher_indent(snip.buffer, snip.cursor)
		indent, _ = get_indentation(line)
		new_cursor = match_exact_indent(snip.buffer, snip.cursor, indent, 'def ')
		if new_cursor:
			snip.cursor.set(*new_cursor)
		insert_lines_before(snip.buffer, snip.cursor, ['\n'])

	snip.context = {
		'call_position': snip.cursor,
		'call_indent': get_indentation(snip.buffer[snip.cursor[0]]),
		'snip.context_match': snip.context,
		'visual': snip.visual_content
	}

	snip.cursor.set(*px.all.ensure_indent(snip.buffer, snip.cursor, indent_amount))

def insert_extracted_method_call(snip):	
	if snip.tabstop != 0:
		return

	if snip.context['visual']:
		call_position = snip.context['call_position']
		snip.buffer[call_position[0]] = snip.context['call_indent'][1]
		vim.current.window.snip.cursor = snip.cursor.to_vim_cursor(*call_position)
		snip.expand_anon('a($2, $1)')
		return from_vim_snip.cursor(vim.current.window.snip.cursor)
	else:
		return snip.cursor


def after_def(snip):
	prev_line = snip.buffer[snip.line-1].strip()
	return prev_line.startswith("def ") or prev_line.startswith("class ")
endglobal

snippet i "if"
if $1:
	${0:${VISUAL}}
endsnippet

snippet r "return"
return 
endsnippet

pre_expand "expand_method_in_right_place(snip)"
post_expand "ensure_newlines(snip.snippet_start, snip.snippet_end)"
snippet d "def"
def $1($2):
	$3
endsnippet

snippet f "for"
for $1 in $2:
	${0:${VISUAL}}
endsnippet

snippet p "print" b
print(${1:${VISUAL}})
endsnippet

snippet s "assert" b
assert 
endsnippet

snippet "(\s+)if n" "if not" br
`!p snip.rv = match.group(1)`if not 
endsnippet

global !p
def filter_previous_buffer(snip, pattern):
	for line in snip.buffer[0:snip.line]:
		if not re.match(pattern, line):
			return False
	return True
endglobal

snippet "^i" "import" "filter_previous_buffer(snip, '^(#|$|import |from )')" reA
import 
endsnippet

snippet "^import (\w+)" "from ... import" br
from `!p snip.rv = match.group(1)` import 
endsnippet

snippet e "self.assertEquals" "match_higher_indent(snip.buffer, snip.cursor, 'def test')" be
self.assertEqual(
	$1,
	$2
)
endsnippet

snippet d "def test" "not after_def(snip) and match_higher_indent(snip.buffer, snip.cursor, 'class \w+\(unittest')" be
def test$1(self):
	$2
endsnippet

pre_expand "expand_method_in_right_place(snip)"
post_expand "ensure_newlines(snip.snippet_start, snip.snippet_end)"
post_jump "insert_extracted_method_call(snip)"
snippet d "def" "not after_def(snip) and match_higher_indent(snip.buffer, snip.cursor, 'class ')" be
def $1(self$2):
	${3:${VISUAL}}
endsnippet

snippet "^cu" "class unit test" br
import unittest

class $1TestCase(unittest.TestCase):
	$2

if __name__ == '__main__':
	unittest.main()
endsnippet

snippet c "class" b
class $1:
	$2
endsnippet

snippet c "class constructor" "match_higher_indent(snip.buffer, snip.cursor, '^class')" be
def __init__(self${1/.+/, /}$1):
	$2
endsnippet

snippet d "docstring" "after_def(snip)" be
"""
$1
"""
endsnippet

snippet re.ma "re.match" "not px.all.is_syntax_string(to_vim_cursor(snip.cursor))" wAe
re.match(r'$1', ${2:`!p snip.rv=px.all.get_last_used_var_for_snippet()`})
endsnippet

# @TODO
# - snippet for adding import statement for package
# - autoexpand class and method definitions
# - snippet for constructor
